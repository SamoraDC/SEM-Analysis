#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EXECUTAR AN√ÅLISE COMPLETA - VERIFICA√á√ÉO DO RELAT√ìRIO UNIFICADO
==============================================================

Script principal que executa todos os m√≥dulos de an√°lise na ordem correta
e gera um relat√≥rio de verifica√ß√£o para comparar com RELATORIO_UNIFICADO_COMPLETO_FINAL.md

Estrutura de Execu√ß√£o:
1. Prepara√ß√£o de dados
2. An√°lise descritiva 
3. Modelos SEM
4. Machine Learning
5. Visualiza√ß√µes
6. Consolida√ß√£o e relat√≥rio final
"""

import os
import sys
import subprocess
import time
from datetime import datetime
import pandas as pd

# Configurar caminhos
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
OUTPUT_DIR = os.path.join(BASE_DIR, 'outputs')
CSV_DIR = os.path.join(BASE_DIR, '..', 'csv_extraidos')

# Criar diret√≥rios de output se n√£o existirem
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs(os.path.join(OUTPUT_DIR, 'dados_processados'), exist_ok=True)
os.makedirs(os.path.join(OUTPUT_DIR, 'visualizacoes'), exist_ok=True)
os.makedirs(os.path.join(OUTPUT_DIR, 'resultados_sem'), exist_ok=True)
os.makedirs(os.path.join(OUTPUT_DIR, 'diagramas'), exist_ok=True)
os.makedirs(os.path.join(OUTPUT_DIR, 'relatorios'), exist_ok=True)

def log_execucao(mensagem):
    """Log com timestamp"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {mensagem}")

def executar_script(caminho_script, descricao):
    """Executa um script Python e captura o resultado"""
    log_execucao(f"üîÑ Iniciando: {descricao}")
    log_execucao(f"üìÑ Script: {caminho_script}")
    
    try:
        # Verificar se o arquivo existe
        if not os.path.exists(caminho_script):
            log_execucao(f"‚ùå ERRO: Arquivo n√£o encontrado: {caminho_script}")
            return False, f"Arquivo n√£o encontrado: {caminho_script}"
        
        # Executar o script
        resultado = subprocess.run(
            [sys.executable, caminho_script],
            cwd=BASE_DIR,
            capture_output=True,
            text=True,
            timeout=300  # 5 minutos de timeout
        )
        
        if resultado.returncode == 0:
            log_execucao(f"‚úÖ Conclu√≠do: {descricao}")
            return True, resultado.stdout
        else:
            log_execucao(f"‚ùå ERRO em {descricao}")
            log_execucao(f"Erro: {resultado.stderr}")
            return False, resultado.stderr
            
    except subprocess.TimeoutExpired:
        log_execucao(f"‚è∞ TIMEOUT: {descricao} (>5min)")
        return False, "Timeout na execu√ß√£o"
    except Exception as e:
        log_execucao(f"‚ùå EXCE√á√ÉO em {descricao}: {str(e)}")
        return False, str(e)

def verificar_dados_entrada():
    """Verifica se os dados de entrada est√£o dispon√≠veis"""
    log_execucao("üîç Verificando dados de entrada...")
    
    arquivos_necessarios = [
        'Qualidade do servi√ßo.csv',
        'Utiliza√ß√£o.csv', 
        'Percep√ß√£o novos servi√ßos.csv',
        'Inten√ß√£o comportamental.csv',
        'Aceita√ß√£o da tecnologia.csv',
        'Experi√™ncia do usu√°rio.csv',
        'Perfil Socioeconomico.csv'
    ]
    
    arquivos_encontrados = 0
    for arquivo in arquivos_necessarios:
        caminho = os.path.join(CSV_DIR, arquivo)
        if os.path.exists(caminho):
            arquivos_encontrados += 1
            log_execucao(f"‚úÖ Encontrado: {arquivo}")
        else:
            log_execucao(f"‚ùå Ausente: {arquivo}")
    
    if arquivos_encontrados == len(arquivos_necessarios):
        log_execucao(f"‚úÖ Todos os {len(arquivos_necessarios)} arquivos de dados encontrados")
        return True
    else:
        log_execucao(f"‚ùå Apenas {arquivos_encontrados}/{len(arquivos_necessarios)} arquivos encontrados")
        return False

def executar_analise_completa():
    """Executa toda a an√°lise na ordem correta"""
    
    log_execucao("=" * 80)
    log_execucao("üöÄ INICIANDO AN√ÅLISE COMPLETA - VERIFICA√á√ÉO DO RELAT√ìRIO UNIFICADO")
    log_execucao("=" * 80)
    
    # Verificar dados de entrada
    if not verificar_dados_entrada():
        log_execucao("‚ùå FALHA: Dados de entrada incompletos")
        return False
    
    # Definir sequ√™ncia de execu√ß√£o
    sequencia_execucao = [
        # FASE 1: PREPARA√á√ÉO
        {
            'script': '01_preparacao/dados_reais_final.py',
            'descricao': 'FASE 1 - Prepara√ß√£o e Valida√ß√£o dos Dados',
            'obrigatorio': True
        },
        
        # FASE 2: AN√ÅLISE DESCRITIVA
        {
            'script': '02_descritiva/analise_expandida_completa.py',
            'descricao': 'FASE 2A - An√°lise Expandida Completa (Perfil Socioecon√¥mico)',
            'obrigatorio': True
        },
        {
            'script': '02_descritiva/analise_completa_corrigida.py',
            'descricao': 'FASE 2B - An√°lise Completa Corrigida (Base Principal)',
            'obrigatorio': True
        },
        
        # FASE 3: MODELOS SEM
        {
            'script': '03_sem_modelos/fix_sem_models.py',
            'descricao': 'FASE 3A - Modelos SEM Fixados (An√°lise Fatorial)',
            'obrigatorio': True
        },
        {
            'script': '03_sem_modelos/analise_sem_corrigida.py',
            'descricao': 'FASE 3B - SEM Corrigida (Percep√ß√£o ‚Üí Inten√ß√£o)',
            'obrigatorio': True
        },
        
        # FASE 4: MACHINE LEARNING
        {
            'script': '04_machine_learning/analise_estatistica_avancada.py',
            'descricao': 'FASE 4A - An√°lise Estat√≠stica Avan√ßada (Random Forest, Clustering)',
            'obrigatorio': False
        },
        {
            'script': '04_machine_learning/fix_wtp_analysis.py',
            'descricao': 'FASE 4B - An√°lise WTP (Disposi√ß√£o a Pagar)',
            'obrigatorio': False
        },
        
        # FASE 5: VISUALIZA√á√ïES
        {
            'script': '05_visualizacoes/criar_diagrama_sem_storytelling.py',
            'descricao': 'FASE 5A - Diagrama SEM com Storytelling',
            'obrigatorio': False
        },
        {
            'script': '05_visualizacoes/criar_diagrama_sem_profissional.py',
            'descricao': 'FASE 5B - Diagrama SEM Profissional',
            'obrigatorio': False
        },
        {
            'script': '05_visualizacoes/criar_diagrama_sem_completo_simples.py',
            'descricao': 'FASE 5C - Diagrama SEM Executivo',
            'obrigatorio': False
        },
        {
            'script': '05_visualizacoes/criar_diagrama_sem_completo.py',
            'descricao': 'FASE 5D - Diagrama SEM Completo',
            'obrigatorio': False
        },
        
        # FASE 6: CONSOLIDA√á√ÉO
        {
            'script': '06_consolidacao/analise_final.py',
            'descricao': 'FASE 6 - Consolida√ß√£o Final',
            'obrigatorio': False
        }
    ]
    
    # Executar sequ√™ncia
    resultados = {}
    falhas_criticas = 0
    
    for i, etapa in enumerate(sequencia_execucao, 1):
        log_execucao(f"\n{'='*60}")
        log_execucao(f"ETAPA {i}/{len(sequencia_execucao)}: {etapa['descricao']}")
        log_execucao(f"{'='*60}")
        
        caminho_script = os.path.join(BASE_DIR, etapa['script'])
        sucesso, resultado = executar_script(caminho_script, etapa['descricao'])
        
        resultados[etapa['script']] = {
            'sucesso': sucesso,
            'resultado': resultado,
            'obrigatorio': etapa['obrigatorio']
        }
        
        if not sucesso and etapa['obrigatorio']:
            falhas_criticas += 1
            log_execucao(f"üö® FALHA CR√çTICA na etapa obrigat√≥ria: {etapa['descricao']}")
        
        # Pequena pausa entre execu√ß√µes
        time.sleep(2)
    
    # Relat√≥rio de execu√ß√£o
    log_execucao(f"\n{'='*80}")
    log_execucao("üìä RELAT√ìRIO DE EXECU√á√ÉO")
    log_execucao(f"{'='*80}")
    
    sucessos = sum(1 for r in resultados.values() if r['sucesso'])
    total = len(resultados)
    
    log_execucao(f"‚úÖ Sucessos: {sucessos}/{total}")
    log_execucao(f"‚ùå Falhas: {total - sucessos}/{total}")
    log_execucao(f"üö® Falhas Cr√≠ticas: {falhas_criticas}")
    
    # Detalhar resultados
    for script, resultado in resultados.items():
        status = "‚úÖ SUCESSO" if resultado['sucesso'] else "‚ùå FALHA"
        tipo = "OBRIGAT√ìRIO" if resultado['obrigatorio'] else "OPCIONAL"
        log_execucao(f"{status} [{tipo}] {script}")
    
    return falhas_criticas == 0

def gerar_relatorio_verificacao():
    """Gera relat√≥rio de verifica√ß√£o comparando com o relat√≥rio original"""
    log_execucao("\nüìù Gerando relat√≥rio de verifica√ß√£o...")
    
    relatorio_path = os.path.join(OUTPUT_DIR, 'relatorios', 'RELATORIO_VERIFICACAO_ANALISE.md')
    
    with open(relatorio_path, 'w', encoding='utf-8') as f:
        f.write("# RELAT√ìRIO DE VERIFICA√á√ÉO - AN√ÅLISE ESTRUTURADA\n\n")
        f.write(f"**Data de Execu√ß√£o:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
        
        f.write("## üéØ OBJETIVO\n\n")
        f.write("Este relat√≥rio verifica se a an√°lise estruturada reproduz os resultados do ")
        f.write("RELATORIO_UNIFICADO_COMPLETO_FINAL.md.\n\n")
        
        f.write("## üìä PRINCIPAIS DESCOBERTAS A VERIFICAR\n\n")
        f.write("### Descobertas do Relat√≥rio Original:\n")
        f.write("- **Correla√ß√£o Percep√ß√£o ‚Üí Inten√ß√£o:** r = 0.896\n")
        f.write("- **Vari√¢ncia Explicada:** 80.3% da inten√ß√£o comportamental\n")
        f.write("- **Perfil Educacional:** 82.2% com ensino m√©dio ou superior\n")
        f.write("- **Predomin√¢ncia Feminina:** 61.5% dos usu√°rios\n")
        f.write("- **Popula√ß√£o Negra:** 59.2% dos usu√°rios\n")
        f.write("- **Usu√°rios de TP:** 70.3% como principal meio\n")
        f.write("- **Qualidade M√©dia:** 1.64/5 (baixa)\n")
        f.write("- **Percep√ß√£o Recompensas:** 4.51/5 (alta)\n")
        f.write("- **Inten√ß√£o Comportamental:** 4.55/5 (alta)\n\n")
        
        f.write("## üîç VERIFICA√á√ïES REALIZADAS\n\n")
        f.write("### Estrutura de Dados:\n")
        f.write("- [ ] 703 respondentes v√°lidos\n")
        f.write("- [ ] 7 datasets principais carregados\n")
        f.write("- [ ] Codifica√ß√£o de escalas Likert correta\n\n")
        
        f.write("### An√°lises Estat√≠sticas:\n")
        f.write("- [ ] Modelo SEM Percep√ß√£o ‚Üí Inten√ß√£o\n")
        f.write("- [ ] An√°lise fatorial confirmat√≥ria\n")
        f.write("- [ ] Correla√ß√µes entre construtos\n")
        f.write("- [ ] Segmenta√ß√£o sociodemogr√°fica\n\n")
        
        f.write("### Visualiza√ß√µes:\n")
        f.write("- [ ] Diagramas SEM gerados\n")
        f.write("- [ ] Gr√°ficos de distribui√ß√£o\n")
        f.write("- [ ] Mapas de correla√ß√£o\n\n")
        
        f.write("## üìà RESULTADOS DA VERIFICA√á√ÉO\n\n")
        f.write("*Este relat√≥rio ser√° atualizado ap√≥s a execu√ß√£o completa da an√°lise.*\n\n")
        
        f.write("## üìã CHECKLIST DE CONFORMIDADE\n\n")
        f.write("- [ ] Dados carregados corretamente\n")
        f.write("- [ ] An√°lise descritiva executada\n")
        f.write("- [ ] Modelos SEM ajustados\n")
        f.write("- [ ] Visualiza√ß√µes geradas\n")
        f.write("- [ ] Resultados compat√≠veis com relat√≥rio original\n\n")
        
        f.write("---\n")
        f.write("*Relat√≥rio gerado automaticamente pela an√°lise estruturada*\n")
    
    log_execucao(f"üìÑ Relat√≥rio de verifica√ß√£o salvo em: {relatorio_path}")

def main():
    """Fun√ß√£o principal"""
    inicio = time.time()
    
    try:
        # Executar an√°lise completa
        sucesso = executar_analise_completa()
        
        # Gerar relat√≥rio de verifica√ß√£o
        gerar_relatorio_verificacao()
        
        # Resultado final
        fim = time.time()
        duracao = fim - inicio
        
        log_execucao(f"\n{'='*80}")
        if sucesso:
            log_execucao("üéâ AN√ÅLISE COMPLETA EXECUTADA COM SUCESSO!")
        else:
            log_execucao("‚ö†Ô∏è AN√ÅLISE COMPLETA COM FALHAS CR√çTICAS")
        
        log_execucao(f"‚è±Ô∏è Tempo total de execu√ß√£o: {duracao:.1f} segundos")
        log_execucao(f"üìÅ Resultados salvos em: {OUTPUT_DIR}")
        log_execucao(f"{'='*80}")
        
        return sucesso
        
    except KeyboardInterrupt:
        log_execucao("\nüõë Execu√ß√£o interrompida pelo usu√°rio")
        return False
    except Exception as e:
        log_execucao(f"\nüí• ERRO INESPERADO: {str(e)}")
        return False

if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1) 