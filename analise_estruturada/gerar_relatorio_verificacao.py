import pandas as pd
import numpy as np
import os
from datetime import datetime

print("=" * 80)
print("RELATORIO DE VERIFICACAO - ANALISE ESTRUTURADA")
print("=" * 80)
print(f"Data de Execucao: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
print()

# Configurar caminhos
csv_dir = os.path.join('..', 'csv_extraidos')
output_dir = os.path.join('outputs', 'relatorios')
os.makedirs(output_dir, exist_ok=True)

try:
    # Carregar dados principais
    perfil = pd.read_csv(os.path.join(csv_dir, 'Perfil Socioeconomico.csv'))
    qualidade = pd.read_csv(os.path.join(csv_dir, 'Qualidade do servi√ßo.csv'))
    percepcao = pd.read_csv(os.path.join(csv_dir, 'Percep√ß√£o novos servi√ßos.csv'))
    intencao = pd.read_csv(os.path.join(csv_dir, 'Inten√ß√£o comportamental.csv'))
    
    print("‚úÖ DADOS CARREGADOS COM SUCESSO")
    print(f"   - Perfil Socioecon√¥mico: {len(perfil)} respondentes")
    print(f"   - Qualidade do Servi√ßo: {len(qualidade)} respondentes")
    print(f"   - Percep√ß√£o de Recompensas: {len(percepcao)} respondentes")
    print(f"   - Inten√ß√£o Comportamental: {len(intencao)} respondentes")
    print()
    
    # ===== VERIFICA√á√ïES PRINCIPAIS =====
    print("üìä VERIFICACOES PRINCIPAIS vs RELATORIO ORIGINAL")
    print("-" * 60)
    
    # 1. TOTAL DE RESPONDENTES
    total_respondentes = len(perfil)
    print(f"1. Total de Respondentes:")
    print(f"   Encontrado: {total_respondentes}")
    print(f"   Esperado: 703")
    print(f"   Status: {'‚úÖ CORRETO' if total_respondentes == 703 else '‚ùå DIVERGENTE'}")
    print()
    
    # 2. G√äNERO
    print("2. Distribui√ß√£o por G√™nero:")
    genero = perfil['G√™nero\xa0'].value_counts()
    feminino_pct = (genero.get('Feminino', 0) / total_respondentes) * 100
    masculino_pct = (genero.get('Masculino', 0) / total_respondentes) * 100
    
    print(f"   Feminino: {genero.get('Feminino', 0)} ({feminino_pct:.1f}%)")
    print(f"   Masculino: {genero.get('Masculino', 0)} ({masculino_pct:.1f}%)")
    print(f"   Esperado Feminino: 61.5%")
    print(f"   Status Feminino: {'‚úÖ CORRETO' if abs(feminino_pct - 61.5) < 0.1 else '‚ùå DIVERGENTE'}")
    print()
    
    # 3. ETNIA/RA√áA
    print("3. Distribui√ß√£o por Etnia:")
    raca = perfil['Ra√ßa'].value_counts()
    negros_pct = (raca.get('Negra ( pretos e pardos)', 0) / total_respondentes) * 100
    brancos_pct = (raca.get('Branca', 0) / total_respondentes) * 100
    
    print(f"   Popula√ß√£o Negra: {raca.get('Negra ( pretos e pardos)', 0)} ({negros_pct:.1f}%)")
    print(f"   Popula√ß√£o Branca: {raca.get('Branca', 0)} ({brancos_pct:.1f}%)")
    print(f"   Esperado Negros: 59.2%")
    print(f"   Status Negros: {'‚úÖ CORRETO' if abs(negros_pct - 59.2) < 0.1 else '‚ùå DIVERGENTE'}")
    print()
    
    # 4. ESCOLARIDADE
    print("4. N√≠vel de Escolaridade:")
    esc = perfil['N√≠vel de escolaridade\n'].value_counts()
    
    # Calcular ensino m√©dio ou superior
    ensino_medio_superior = 0
    for categoria in esc.index:
        if any(termo in categoria for termo in ['Ensino M√©dio', 'Gradua√ß√£o', 'P√≥s-gradua√ß√£o']):
            ensino_medio_superior += esc[categoria]
    
    ems_pct = (ensino_medio_superior / total_respondentes) * 100
    print(f"   Ensino M√©dio ou Superior: {ensino_medio_superior} ({ems_pct:.1f}%)")
    print(f"   Esperado: 82.2%")
    print(f"   Status: {'‚úÖ CORRETO' if abs(ems_pct - 82.2) < 1.0 else '‚ùå DIVERGENTE'}")
    print()
    
    # 5. AN√ÅLISE DE QUALIDADE
    print("5. An√°lise de Qualidade do Servi√ßo:")
    mapa_satisfacao = {
        'Muito insatisfeito': 1, 'Insatisfeito': 2, 'Neutro': 3,
        'Satisfeito': 4, 'Muito satisfeito': 5
    }
    
    qualidade_num = qualidade.copy()
    for col in qualidade.columns[1:]:
        qualidade_num[col] = qualidade[col].map(mapa_satisfacao)
    
    media_qualidade = qualidade_num.iloc[:, 1:].mean().mean()
    print(f"   M√©dia Geral de Qualidade: {media_qualidade:.2f}")
    print(f"   Esperado: 1.64")
    print(f"   Status: {'‚úÖ CORRETO' if abs(media_qualidade - 1.64) < 0.1 else '‚ùå DIVERGENTE'}")
    print()
    
    # 6. AN√ÅLISE DE PERCEP√á√ÉO DE RECOMPENSAS
    print("6. Percep√ß√£o de Recompensas:")
    mapa_concordancia = {
        'Discordo totalmente': 1, 'Discordo': 2, 'Neutro': 3,
        'Concordo': 4, 'Concordo totalmente': 5
    }
    
    percepcao_num = percepcao.copy()
    for col in percepcao.columns[1:]:
        percepcao_num[col] = percepcao[col].map(mapa_concordancia)
    
    media_percepcao = percepcao_num.iloc[:, 1:].mean().mean()
    print(f"   M√©dia Geral de Percep√ß√£o: {media_percepcao:.2f}")
    print(f"   Esperado: 4.51")
    print(f"   Status: {'‚úÖ CORRETO' if abs(media_percepcao - 4.51) < 0.1 else '‚ùå DIVERGENTE'}")
    print()
    
    # 7. AN√ÅLISE DE INTEN√á√ÉO COMPORTAMENTAL
    print("7. Inten√ß√£o Comportamental:")
    intencao_num = intencao.copy()
    for col in intencao.columns[1:]:
        intencao_num[col] = intencao[col].map(mapa_concordancia)
    
    media_intencao = intencao_num.iloc[:, 1:].mean().mean()
    print(f"   M√©dia Geral de Inten√ß√£o: {media_intencao:.2f}")
    print(f"   Esperado: 4.55")
    print(f"   Status: {'‚úÖ CORRETO' if abs(media_intencao - 4.55) < 0.1 else '‚ùå DIVERGENTE'}")
    print()
    
    # 8. MODELO SEM PRINCIPAL
    print("8. Modelo SEM - Percep√ß√£o ‚Üí Inten√ß√£o:")
    
    # Criar construtos
    construtos = pd.DataFrame({
        'ID': qualidade_num['ID'],
        'Qualidade': qualidade_num.iloc[:, 1:].mean(axis=1),
        'Percepcao_Recompensas': percepcao_num.iloc[:, 1:].mean(axis=1),
        'Intencao_Comportamental': intencao_num.iloc[:, 1:].mean(axis=1)
    })
    
    construtos_clean = construtos.dropna()
    
    # Calcular correla√ß√£o
    corr_percepcao_intencao = construtos_clean['Percepcao_Recompensas'].corr(construtos_clean['Intencao_Comportamental'])
    
    # Modelo de regress√£o
    from sklearn.linear_model import LinearRegression
    from sklearn.metrics import r2_score
    
    X = construtos_clean[['Percepcao_Recompensas']].values
    y = construtos_clean['Intencao_Comportamental'].values
    
    model = LinearRegression().fit(X, y)
    r2 = r2_score(y, model.predict(X))
    
    print(f"   Correla√ß√£o Percep√ß√£o ‚Üî Inten√ß√£o: {corr_percepcao_intencao:.3f}")
    print(f"   R¬≤ do Modelo: {r2:.3f}")
    print(f"   Casos V√°lidos: {len(construtos_clean)}")
    print(f"   Esperado Correla√ß√£o: 0.896")
    print(f"   Esperado R¬≤: 0.803")
    print(f"   Status Correla√ß√£o: {'‚úÖ CORRETO' if abs(corr_percepcao_intencao - 0.896) < 0.05 else '‚ùå DIVERGENTE'}")
    print(f"   Status R¬≤: {'‚úÖ CORRETO' if abs(r2 - 0.803) < 0.05 else '‚ùå DIVERGENTE'}")
    print()
    
    # ===== RESUMO FINAL =====
    print("=" * 80)
    print("üìã RESUMO DA VERIFICA√á√ÉO")
    print("=" * 80)
    
    verificacoes = [
        ("Total de Respondentes", total_respondentes == 703),
        ("Predomin√¢ncia Feminina", abs(feminino_pct - 61.5) < 0.1),
        ("Popula√ß√£o Negra", abs(negros_pct - 59.2) < 0.1),
        ("Ensino M√©dio/Superior", abs(ems_pct - 82.2) < 1.0),
        ("Qualidade Baixa", abs(media_qualidade - 1.64) < 0.1),
        ("Percep√ß√£o Alta", abs(media_percepcao - 4.51) < 0.1),
        ("Inten√ß√£o Alta", abs(media_intencao - 4.55) < 0.1),
        ("Correla√ß√£o SEM", abs(corr_percepcao_intencao - 0.896) < 0.05),
        ("R¬≤ do Modelo", abs(r2 - 0.803) < 0.05)
    ]
    
    sucessos = sum(1 for _, status in verificacoes if status)
    total_verificacoes = len(verificacoes)
    
    print(f"‚úÖ Verifica√ß√µes Corretas: {sucessos}/{total_verificacoes}")
    print(f"‚ùå Verifica√ß√µes Divergentes: {total_verificacoes - sucessos}/{total_verificacoes}")
    print(f"üìä Taxa de Conformidade: {(sucessos/total_verificacoes)*100:.1f}%")
    print()
    
    for nome, status in verificacoes:
        emoji = "‚úÖ" if status else "‚ùå"
        print(f"{emoji} {nome}")
    
    print()
    
    if sucessos == total_verificacoes:
        print("üéâ VERIFICA√á√ÉO COMPLETA: Todos os resultados batem com o relat√≥rio original!")
    elif sucessos >= total_verificacoes * 0.8:
        print("‚ö†Ô∏è VERIFICA√á√ÉO PARCIAL: Maioria dos resultados est√° correta.")
    else:
        print("‚ùå VERIFICA√á√ÉO FALHOU: Muitas diverg√™ncias encontradas.")
    
    # Salvar relat√≥rio
    relatorio_path = os.path.join(output_dir, 'RELATORIO_VERIFICACAO_FINAL.md')
    
    with open(relatorio_path, 'w', encoding='utf-8') as f:
        f.write("# RELAT√ìRIO DE VERIFICA√á√ÉO FINAL - AN√ÅLISE ESTRUTURADA\n\n")
        f.write(f"**Data:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
        f.write(f"## üìä RESULTADOS DA VERIFICA√á√ÉO\n\n")
        f.write(f"**Taxa de Conformidade:** {(sucessos/total_verificacoes)*100:.1f}%\n")
        f.write(f"**Verifica√ß√µes Corretas:** {sucessos}/{total_verificacoes}\n\n")
        
        f.write("### Principais Descobertas Confirmadas:\n\n")
        f.write(f"- **Total de Respondentes:** {total_respondentes} (703 esperado)\n")
        f.write(f"- **Predomin√¢ncia Feminina:** {feminino_pct:.1f}% (61.5% esperado)\n")
        f.write(f"- **Popula√ß√£o Negra:** {negros_pct:.1f}% (59.2% esperado)\n")
        f.write(f"- **Ensino M√©dio/Superior:** {ems_pct:.1f}% (82.2% esperado)\n")
        f.write(f"- **Qualidade M√©dia:** {media_qualidade:.2f} (1.64 esperado)\n")
        f.write(f"- **Percep√ß√£o Recompensas:** {media_percepcao:.2f} (4.51 esperado)\n")
        f.write(f"- **Inten√ß√£o Comportamental:** {media_intencao:.2f} (4.55 esperado)\n")
        f.write(f"- **Correla√ß√£o Percep√ß√£o‚ÜíInten√ß√£o:** {corr_percepcao_intencao:.3f} (0.896 esperado)\n")
        f.write(f"- **R¬≤ do Modelo SEM:** {r2:.3f} (0.803 esperado)\n\n")
        
        f.write("### Status das Verifica√ß√µes:\n\n")
        for nome, status in verificacoes:
            emoji = "‚úÖ" if status else "‚ùå"
            f.write(f"{emoji} {nome}\n")
        
        f.write(f"\n### Conclus√£o:\n\n")
        if sucessos == total_verificacoes:
            f.write("üéâ **VERIFICA√á√ÉO COMPLETA:** Todos os resultados reproduzem fielmente o relat√≥rio original!\n")
        elif sucessos >= total_verificacoes * 0.8:
            f.write("‚ö†Ô∏è **VERIFICA√á√ÉO PARCIAL:** A maioria dos resultados est√° correta, com pequenas diverg√™ncias.\n")
        else:
            f.write("‚ùå **VERIFICA√á√ÉO FALHOU:** Muitas diverg√™ncias encontradas em rela√ß√£o ao relat√≥rio original.\n")
    
    print(f"\nüìÑ Relat√≥rio salvo em: {relatorio_path}")
    print("\n" + "=" * 80)
    print("VERIFICA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("=" * 80)

except Exception as e:
    print(f"‚ùå ERRO na verifica√ß√£o: {e}")
    import traceback
    traceback.print_exc() 