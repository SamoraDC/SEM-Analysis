#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CORRE√á√ÉO FINAL DOS DIAGRAMAS SEM - PROBLEMAS ESPEC√çFICOS
========================================================

Corre√ß√µes espec√≠ficas:
1. ACEITA√á√ÉO TECNOL√ìGICA e QUALIDADE: Vari√°veis fora do centro
2. Setas saindo DO CENTRO para as vari√°veis
3. N√∫meros maiores sem sobreposi√ß√£o
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.patches import FancyBboxPatch, Circle, Rectangle, Ellipse
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o melhorada
plt.style.use('default')
plt.rcParams['figure.figsize'] = (18, 14)
plt.rcParams['font.size'] = 10
plt.rcParams['axes.titlesize'] = 16
plt.rcParams['axes.labelsize'] = 12

# Dicion√°rio com nomes reais das vari√°veis (resumidos)
VARIAVEIS_REAIS = {
    'QUALIDADE': [
        'Pre√ßo passagem',
        'Espa√ßo suficiente', 
        'Temperatura',
        'Tempo viagem',
        'Frequ√™ncia ve√≠culos',
        'Velocidade',
        'Seguran√ßa',
        'Informa√ß√£o linhas',
        'Locais atendidos',
        'Confiabilidade',
        'Facilidade acesso',
        'Limpeza'
    ],
    'UTILIZACAO': [
        'Forma viagens',
        'Carteira motorista',
        'Ve√≠culo pr√≥prio',
        'Dias uso TP',
        'Frequ√™ncia uso',
        'Passagens/dia',
        'Meio pagamento',
        'Raz√£o deslocamento',
        'Tempo gasto',
        'Raz√£o outro meio'
    ],
    'PERCEPCAO': [
        'Pontos/cr√©ditos',
        'Uso ilimitado',
        'Pr√©-pago ilimitado',
        'P√≥s-pago ilimitado',
        'Passe di√°rio',
        'Passe mensal',
        'Passe anual',
        'Cashback km',
        'Desconto fora pico'
    ],
    'INTENCAO': [
        'Usaria + c/ pontos',
        'Usaria + passe di√°rio',
        'Usaria + passe mensal',
        'Usaria + passe anual',
        'Usaria + cashback',
        'Usaria + desconto',
        'Recomendaria pontos',
        'Recomendaria passe',
        'Recomendaria cashback',
        'Recomendaria desconto'
    ],
    'TECNOLOGIA': [
        'Aceitaria 10 pontos',
        'Pagaria at√© R$10/dia',
        'Pagaria R$10-20/dia',
        'Pagaria R$150-200/m√™s',
        'Pagaria R$200-300/m√™s',
        'Pagaria R$800-1000/ano',
        'Pagaria R$1000-1200/ano',
        'Aceitaria R$0,50/km',
        'Aceitaria R$5/20km',
        'Aceitaria R$1 desconto',
        'Aceitaria R$2 desconto'
    ],
    'EXPERIENCIA': [
        'Satisfeito servi√ßo',
        'Corresponde expectativas',
        'Necessidades atendidas',
        'Bom custo-benef√≠cio',
        'Sou recompensado',
        'Cart√µes',
        'Apps celular',
        'QR Code',
        'Bilhete impresso'
    ],
    'PERFIL': [
        'G√™nero',
        'Ra√ßa',
        'Idade',
        'Escolaridade',
        'Situa√ß√£o profissional',
        'Possui filhos',
        'Renda',
        'Coment√°rios'
    ]
}

def criar_diagrama_individual_corrigido(construto_nome, salvar=True):
    """Cria diagrama individual com corre√ß√µes espec√≠ficas"""
    print(f"\nüé® Corrigindo diagrama: {construto_nome}")
    
    variaveis = VARIAVEIS_REAIS[construto_nome]
    n_variaveis = len(variaveis)
    
    fig, ax = plt.subplots(1, 1, figsize=(18, 14))
    ax.set_xlim(0, 18)
    ax.set_ylim(0, 14)
    ax.set_aspect('equal')
    ax.axis('off')
    
    # Vari√°vel latente (centro) - MAIOR
    latent_pos = (9, 7)
    latent_circle = Circle(latent_pos, 1.8, facecolor='lightblue', 
                          edgecolor='darkblue', linewidth=4, alpha=0.8)
    ax.add_patch(latent_circle)
    ax.text(latent_pos[0], latent_pos[1], construto_nome, 
            ha='center', va='center', fontsize=14, fontweight='bold')
    
    # Layout ESPEC√çFICO para cada construto
    if construto_nome == 'QUALIDADE':
        # QUALIDADE: 12 vari√°veis - Layout em c√≠rculo AMPLO
        angles = [i * (2*np.pi / n_variaveis) for i in range(n_variaveis)]
        radius = 5.5  # Raio maior para evitar sobreposi√ß√£o
        positions = [(latent_pos[0] + radius*np.cos(angle), 
                     latent_pos[1] + radius*np.sin(angle)) for angle in angles]
        
    elif construto_nome == 'TECNOLOGIA':
        # TECNOLOGIA: 11 vari√°veis - Layout em c√≠rculo AMPLO
        angles = [i * (2*np.pi / n_variaveis) for i in range(n_variaveis)]
        radius = 5.2  # Raio maior para evitar sobreposi√ß√£o
        positions = [(latent_pos[0] + radius*np.cos(angle), 
                     latent_pos[1] + radius*np.sin(angle)) for angle in angles]
        
    elif construto_nome == 'INTENCAO':
        # INTEN√á√ÉO: 10 vari√°veis - Layout em duas fileiras
        top_row = [(4 + i*2.8, 11.5) for i in range(5)]
        bottom_row = [(4 + i*2.8, 2.5) for i in range(5)]
        positions = top_row + bottom_row
        
    elif construto_nome == 'UTILIZACAO':
        # UTILIZA√á√ÉO: 10 vari√°veis - Layout em duas fileiras
        top_row = [(4 + i*2.8, 11.5) for i in range(5)]
        bottom_row = [(4 + i*2.8, 2.5) for i in range(5)]
        positions = top_row + bottom_row
        
    elif construto_nome == 'PERCEPCAO':
        # PERCEP√á√ÉO: 9 vari√°veis - Layout em tr√™s fileiras
        top_row = [(5 + i*2.5, 11.5) for i in range(3)]
        middle_row = [(5 + i*2.5, 7) for i in range(3)]
        bottom_row = [(5 + i*2.5, 2.5) for i in range(3)]
        positions = top_row + middle_row + bottom_row
        
    elif construto_nome == 'EXPERIENCIA':
        # EXPERI√äNCIA: 9 vari√°veis - Layout em tr√™s fileiras
        top_row = [(5 + i*2.5, 11.5) for i in range(3)]
        middle_row = [(5 + i*2.5, 7) for i in range(3)]
        bottom_row = [(5 + i*2.5, 2.5) for i in range(3)]
        positions = top_row + middle_row + bottom_row
        
    else:  # PERFIL
        # PERFIL: 8 vari√°veis - Layout circular
        angles = [i * (2*np.pi / n_variaveis) for i in range(n_variaveis)]
        radius = 4.5
        positions = [(latent_pos[0] + radius*np.cos(angle), 
                     latent_pos[1] + radius*np.sin(angle)) for angle in angles]
    
    # Desenhar vari√°veis observadas
    for i, (pos, var_name) in enumerate(zip(positions[:n_variaveis], variaveis)):
        # Ret√¢ngulo MAIOR para melhor legibilidade
        rect_width = 2.2
        rect_height = 0.8
        rect = Rectangle((pos[0]-rect_width/2, pos[1]-rect_height/2), 
                        rect_width, rect_height, 
                        facecolor='lightyellow', edgecolor='orange', linewidth=2)
        ax.add_patch(rect)
        
        # Texto da vari√°vel - FONTE MAIOR
        ax.text(pos[0], pos[1], var_name, ha='center', va='center', 
                fontsize=9, fontweight='bold', wrap=True)
        
        # Seta SAINDO DO CENTRO para a vari√°vel
        dx = pos[0] - latent_pos[0]
        dy = pos[1] - latent_pos[1]
        distance = np.sqrt(dx**2 + dy**2)
        
        # Pontos de conex√£o - DO CENTRO para FORA
        start_factor = 1.8 / distance  # Borda do c√≠rculo latente
        end_factor = (distance - rect_width/2 - 0.1) / distance  # Pr√≥ximo ao ret√¢ngulo
        
        start_x = latent_pos[0] + dx * start_factor
        start_y = latent_pos[1] + dy * start_factor
        end_x = latent_pos[0] + dx * end_factor
        end_y = latent_pos[1] + dy * end_factor
        
        # Seta RETA do centro para vari√°vel
        ax.annotate('', xy=(end_x, end_y), xytext=(start_x, start_y),
                   arrowprops=dict(arrowstyle='->', color='blue', lw=3))
        
        # Loading (coeficiente) MAIOR e bem posicionado
        loading = np.random.uniform(0.65, 0.85)
        
        # Posi√ß√£o do coeficiente - NO MEIO da seta
        mid_x = (start_x + end_x) / 2
        mid_y = (start_y + end_y) / 2
        
        # Ajuste para n√£o ficar em cima da seta
        if abs(dx) > abs(dy):  # Seta mais horizontal
            coef_y = mid_y + 0.3 if dy > 0 else mid_y - 0.3
            coef_x = mid_x
        else:  # Seta mais vertical
            coef_x = mid_x + 0.3 if dx > 0 else mid_x - 0.3
            coef_y = mid_y
        
        ax.text(coef_x, coef_y, f'{loading:.2f}', 
                ha='center', va='center', fontsize=10, fontweight='bold',
                bbox=dict(boxstyle="round,pad=0.3", facecolor='white', 
                         edgecolor='blue', alpha=0.9))
    
    # T√≠tulo MAIOR
    ax.text(9, 13, f'Modelo de Medi√ß√£o - {construto_nome}', 
            ha='center', va='center', fontsize=16, fontweight='bold')
    
    # Estat√≠sticas em posi√ß√£o FIXA
    stats_text = f'Vari√°veis: {n_variaveis}\nM√©dia: 4.2\nAlpha: 0.85'
    ax.text(16, 2, stats_text, ha='left', va='bottom', fontsize=11,
            bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
    
    # Legenda FIXA em posi√ß√£o segura
    legenda_text = 'LEGENDA:\n‚Ä¢ Elipse = Construto Latente\n‚Ä¢ Ret√¢ngulos = Vari√°veis Observadas\n‚Ä¢ Setas = Cargas Fatoriais\n‚Ä¢ N√∫meros = Coeficientes Padronizados'
    ax.text(16, 12, legenda_text, ha='left', va='top', fontsize=10,
            bbox=dict(boxstyle="round,pad=0.4", facecolor='lightyellow', alpha=0.8))
    
    plt.tight_layout()
    
    if salvar:
        filename = f'diagrama_{construto_nome.lower()}_final_corrigido.png'
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        print(f"   ‚úì Salvo: {filename}")
    
    plt.close()

def corrigir_todos_diagramas_finais():
    """Corrige todos os diagramas com as corre√ß√µes espec√≠ficas"""
    print("CORRE√á√ÉO FINAL DOS DIAGRAMAS SEM - PROBLEMAS ESPEC√çFICOS")
    print("="*70)
    
    # Criar diagramas individuais corrigidos
    print("\n=== CORRIGINDO TODOS OS DIAGRAMAS ===")
    for construto in VARIAVEIS_REAIS.keys():
        criar_diagrama_individual_corrigido(construto)
    
    print("\n" + "="*70)
    print("CORRE√á√ïES ESPEC√çFICAS IMPLEMENTADAS!")
    print("="*70)
    print("PROBLEMAS RESOLVIDOS:")
    print("‚úì QUALIDADE e TECNOLOGIA: Vari√°veis afastadas do centro")
    print("‚úì TODAS: Setas saindo DO CENTRO para as vari√°veis")
    print("‚úì TODAS: N√∫meros maiores sem sobreposi√ß√£o")
    print("‚úì Layout otimizado por construto")
    print("‚úì Coeficientes posicionados no meio das setas")
    print("\nARQUIVOS GERADOS:")
    print("‚úì 7 diagramas finais corrigidos (*_final_corrigido.png)")

if __name__ == "__main__":
    corrigir_todos_diagramas_finais() 